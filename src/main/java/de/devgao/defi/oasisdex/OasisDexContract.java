package devgao.io.oasisdex;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class OasisDexContract extends Contract {
    private static final String BINARY = "";

    public static final String FUNC__BEST = "_best";

    public static final String FUNC__DUST = "_dust";

    public static final String FUNC__NEAR = "_near";

    public static final String FUNC__RANK = "_rank";

    public static final String FUNC__SPAN = "_span";

    public static final String FUNC_AUTHORITY = "authority";

    public static final String FUNC_BUMP = "bump";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_BUYALLAMOUNT = "buyAllAmount";

    public static final String FUNC_BUYENABLED = "buyEnabled";

    public static final String FUNC_CANCEL = "cancel";

    public static final String FUNC_CLOSE_TIME = "close_time";

    public static final String FUNC_DEL_RANK = "del_rank";

    public static final String FUNC_DUSTID = "dustId";

    public static final String FUNC_GETBESTOFFER = "getBestOffer";

    public static final String FUNC_GETBETTEROFFER = "getBetterOffer";

    public static final String FUNC_GETBUYAMOUNT = "getBuyAmount";

    public static final String FUNC_GETFIRSTUNSORTEDOFFER = "getFirstUnsortedOffer";

    public static final String FUNC_GETMINSELL = "getMinSell";

    public static final String FUNC_GETNEXTUNSORTEDOFFER = "getNextUnsortedOffer";

    public static final String FUNC_GETOFFER = "getOffer";

    public static final String FUNC_GETOFFERCOUNT = "getOfferCount";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETPAYAMOUNT = "getPayAmount";

    public static final String FUNC_GETTIME = "getTime";

    public static final String FUNC_GETWORSEOFFER = "getWorseOffer";

    public static final String FUNC_INSERT = "insert";

    public static final String FUNC_ISACTIVE = "isActive";

    public static final String FUNC_ISCLOSED = "isClosed";

    public static final String FUNC_ISOFFERSORTED = "isOfferSorted";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_LAST_OFFER_ID = "last_offer_id";

    public static final String FUNC_MAKE = "make";

    public static final String FUNC_MATCHINGENABLED = "matchingEnabled";

    public static final String FUNC_offer = "offer";

    public static final String FUNC_OFFERS = "offers";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SELLALLAMOUNT = "sellAllAmount";

    public static final String FUNC_SETAUTHORITY = "setAuthority";

    public static final String FUNC_SETBUYENABLED = "setBuyEnabled";

    public static final String FUNC_SETMATCHINGENABLED = "setMatchingEnabled";

    public static final String FUNC_SETMINSELL = "setMinSell";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_STOP = "stop";

    public static final String FUNC_STOPPED = "stopped";

    public static final String FUNC_TAKE = "take";

    public static final Event LOGBUMP_EVENT = new Event("LogBump", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event LOGBUYENABLED_EVENT = new Event("LogBuyEnabled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event LOGDELETE_EVENT = new Event("LogDelete", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGINSERT_EVENT = new Event("LogInsert", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGITEMUPDATE_EVENT = new Event("LogItemUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGKILL_EVENT = new Event("LogKill", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event LOGMAKE_EVENT = new Event("LogMake", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event LOGMATCHINGENABLED_EVENT = new Event("LogMatchingEnabled", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event LOGMINSELL_EVENT = new Event("LogMinSell", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGNOTE_EVENT = new Event("LogNote", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event LOGSETAUTHORITY_EVENT = new Event("LogSetAuthority", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event LOGSETOWNER_EVENT = new Event("LogSetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event LOGSORTEDOFFER_EVENT = new Event("LogSortedOffer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGTAKE_EVENT = new Event("LogTake", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint128>() {}, new TypeReference<Uint128>() {}, new TypeReference<Uint64>() {}));
    ;

    public static final Event LOGTRADE_EVENT = new Event("LogTrade", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event LOGUNSORTEDOFFER_EVENT = new Event("LogUnsortedOffer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected OasisDexContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected OasisDexContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected OasisDexContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected OasisDexContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<LogBumpEventResponse> getLogBumpEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBUMP_EVENT, transactionReceipt);
        ArrayList<LogBumpEventResponse> responses = new ArrayList<LogBumpEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBumpEventResponse typedResponse = new LogBumpEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.maker = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogBumpEventResponse> logBumpEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogBumpEventResponse>() {
            @Override
            public LogBumpEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBUMP_EVENT, log);
                LogBumpEventResponse typedResponse = new LogBumpEventResponse();
                typedResponse.log = log;
                typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.maker = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogBumpEventResponse> logBumpEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBUMP_EVENT));
        return logBumpEventFlowable(filter);
    }

    public List<LogBuyEnabledEventResponse> getLogBuyEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGBUYENABLED_EVENT, transactionReceipt);
        ArrayList<LogBuyEnabledEventResponse> responses = new ArrayList<LogBuyEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogBuyEnabledEventResponse typedResponse = new LogBuyEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.isEnabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogBuyEnabledEventResponse> logBuyEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogBuyEnabledEventResponse>() {
            @Override
            public LogBuyEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGBUYENABLED_EVENT, log);
                LogBuyEnabledEventResponse typedResponse = new LogBuyEnabledEventResponse();
                typedResponse.log = log;
                typedResponse.isEnabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogBuyEnabledEventResponse> logBuyEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGBUYENABLED_EVENT));
        return logBuyEnabledEventFlowable(filter);
    }

    public List<LogDeleteEventResponse> getLogDeleteEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGDELETE_EVENT, transactionReceipt);
        ArrayList<LogDeleteEventResponse> responses = new ArrayList<LogDeleteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogDeleteEventResponse typedResponse = new LogDeleteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.keeper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogDeleteEventResponse> logDeleteEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogDeleteEventResponse>() {
            @Override
            public LogDeleteEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGDELETE_EVENT, log);
                LogDeleteEventResponse typedResponse = new LogDeleteEventResponse();
                typedResponse.log = log;
                typedResponse.keeper = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogDeleteEventResponse> logDeleteEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGDELETE_EVENT));
        return logDeleteEventFlowable(filter);
    }

    public List<LogInsertEventResponse> getLogInsertEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINSERT_EVENT, transactionReceipt);
        ArrayList<LogInsertEventResponse> responses = new ArrayList<LogInsertEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogInsertEventResponse typedResponse = new LogInsertEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.keeper = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogInsertEventResponse> logInsertEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogInsertEventResponse>() {
            @Override
            public LogInsertEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGINSERT_EVENT, log);
                LogInsertEventResponse typedResponse = new LogInsertEventResponse();
                typedResponse.log = log;
                typedResponse.keeper = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogInsertEventResponse> logInsertEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGINSERT_EVENT));
        return logInsertEventFlowable(filter);
    }

    public List<LogItemUpdateEventResponse> getLogItemUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGITEMUPDATE_EVENT, transactionReceipt);
        ArrayList<LogItemUpdateEventResponse> responses = new ArrayList<LogItemUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogItemUpdateEventResponse typedResponse = new LogItemUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogItemUpdateEventResponse> logItemUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogItemUpdateEventResponse>() {
            @Override
            public LogItemUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGITEMUPDATE_EVENT, log);
                LogItemUpdateEventResponse typedResponse = new LogItemUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogItemUpdateEventResponse> logItemUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGITEMUPDATE_EVENT));
        return logItemUpdateEventFlowable(filter);
    }

    public List<LogKillEventResponse> getLogKillEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGKILL_EVENT, transactionReceipt);
        ArrayList<LogKillEventResponse> responses = new ArrayList<LogKillEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogKillEventResponse typedResponse = new LogKillEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.maker = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogKillEventResponse> logKillEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogKillEventResponse>() {
            @Override
            public LogKillEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGKILL_EVENT, log);
                LogKillEventResponse typedResponse = new LogKillEventResponse();
                typedResponse.log = log;
                typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.maker = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogKillEventResponse> logKillEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGKILL_EVENT));
        return logKillEventFlowable(filter);
    }

    public List<LogMakeEventResponse> getLogMakeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGMAKE_EVENT, transactionReceipt);
        ArrayList<LogMakeEventResponse> responses = new ArrayList<LogMakeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogMakeEventResponse typedResponse = new LogMakeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.maker = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogMakeEventResponse> logMakeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogMakeEventResponse>() {
            @Override
            public LogMakeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGMAKE_EVENT, log);
                LogMakeEventResponse typedResponse = new LogMakeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.maker = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogMakeEventResponse> logMakeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGMAKE_EVENT));
        return logMakeEventFlowable(filter);
    }

    public List<LogMatchingEnabledEventResponse> getLogMatchingEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGMATCHINGENABLED_EVENT, transactionReceipt);
        ArrayList<LogMatchingEnabledEventResponse> responses = new ArrayList<LogMatchingEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogMatchingEnabledEventResponse typedResponse = new LogMatchingEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.isEnabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogMatchingEnabledEventResponse> logMatchingEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogMatchingEnabledEventResponse>() {
            @Override
            public LogMatchingEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGMATCHINGENABLED_EVENT, log);
                LogMatchingEnabledEventResponse typedResponse = new LogMatchingEnabledEventResponse();
                typedResponse.log = log;
                typedResponse.isEnabled = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogMatchingEnabledEventResponse> logMatchingEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGMATCHINGENABLED_EVENT));
        return logMatchingEnabledEventFlowable(filter);
    }

    public List<LogMinSellEventResponse> getLogMinSellEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGMINSELL_EVENT, transactionReceipt);
        ArrayList<LogMinSellEventResponse> responses = new ArrayList<LogMinSellEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogMinSellEventResponse typedResponse = new LogMinSellEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.min_amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogMinSellEventResponse> logMinSellEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogMinSellEventResponse>() {
            @Override
            public LogMinSellEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGMINSELL_EVENT, log);
                LogMinSellEventResponse typedResponse = new LogMinSellEventResponse();
                typedResponse.log = log;
                typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.min_amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogMinSellEventResponse> logMinSellEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGMINSELL_EVENT));
        return logMinSellEventFlowable(filter);
    }

    public List<LogNoteEventResponse> getLogNoteEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGNOTE_EVENT, transactionReceipt);
        ArrayList<LogNoteEventResponse> responses = new ArrayList<LogNoteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogNoteEventResponse typedResponse = new LogNoteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sig = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.guy = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.foo = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.bar = (byte[]) eventValues.getIndexedValues().get(3).getValue();
            typedResponse.wad = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fax = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogNoteEventResponse> logNoteEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogNoteEventResponse>() {
            @Override
            public LogNoteEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGNOTE_EVENT, log);
                LogNoteEventResponse typedResponse = new LogNoteEventResponse();
                typedResponse.log = log;
                typedResponse.sig = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.guy = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.foo = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.bar = (byte[]) eventValues.getIndexedValues().get(3).getValue();
                typedResponse.wad = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.fax = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogNoteEventResponse> logNoteEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGNOTE_EVENT));
        return logNoteEventFlowable(filter);
    }

    public List<LogSetAuthorityEventResponse> getLogSetAuthorityEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETAUTHORITY_EVENT, transactionReceipt);
        ArrayList<LogSetAuthorityEventResponse> responses = new ArrayList<LogSetAuthorityEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetAuthorityEventResponse typedResponse = new LogSetAuthorityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authority = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogSetAuthorityEventResponse> logSetAuthorityEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogSetAuthorityEventResponse>() {
            @Override
            public LogSetAuthorityEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGSETAUTHORITY_EVENT, log);
                LogSetAuthorityEventResponse typedResponse = new LogSetAuthorityEventResponse();
                typedResponse.log = log;
                typedResponse.authority = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogSetAuthorityEventResponse> logSetAuthorityEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGSETAUTHORITY_EVENT));
        return logSetAuthorityEventFlowable(filter);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses = new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogSetOwnerEventResponse> logSetOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogSetOwnerEventResponse>() {
            @Override
            public LogSetOwnerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGSETOWNER_EVENT, log);
                LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogSetOwnerEventResponse> logSetOwnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGSETOWNER_EVENT));
        return logSetOwnerEventFlowable(filter);
    }

    public List<LogSortedOfferEventResponse> getLogSortedOfferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSORTEDOFFER_EVENT, transactionReceipt);
        ArrayList<LogSortedOfferEventResponse> responses = new ArrayList<LogSortedOfferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSortedOfferEventResponse typedResponse = new LogSortedOfferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogSortedOfferEventResponse> logSortedOfferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogSortedOfferEventResponse>() {
            @Override
            public LogSortedOfferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGSORTEDOFFER_EVENT, log);
                LogSortedOfferEventResponse typedResponse = new LogSortedOfferEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogSortedOfferEventResponse> logSortedOfferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGSORTEDOFFER_EVENT));
        return logSortedOfferEventFlowable(filter);
    }

    public List<LogTakeEventResponse> getLogTakeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGTAKE_EVENT, transactionReceipt);
        ArrayList<LogTakeEventResponse> responses = new ArrayList<LogTakeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTakeEventResponse typedResponse = new LogTakeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.maker = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.taker = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.take_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.give_amt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogTakeEventResponse> logTakeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogTakeEventResponse>() {
            @Override
            public LogTakeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGTAKE_EVENT, log);
                LogTakeEventResponse typedResponse = new LogTakeEventResponse();
                typedResponse.log = log;
                typedResponse.pair = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.maker = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.taker = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.pay_gem = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.buy_gem = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.take_amt = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.give_amt = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogTakeEventResponse> logTakeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGTAKE_EVENT));
        return logTakeEventFlowable(filter);
    }

    public List<LogTradeEventResponse> getLogTradeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGTRADE_EVENT, transactionReceipt);
        ArrayList<LogTradeEventResponse> responses = new ArrayList<LogTradeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogTradeEventResponse typedResponse = new LogTradeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.pay_gem = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.buy_gem = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogTradeEventResponse> logTradeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogTradeEventResponse>() {
            @Override
            public LogTradeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGTRADE_EVENT, log);
                LogTradeEventResponse typedResponse = new LogTradeEventResponse();
                typedResponse.log = log;
                typedResponse.pay_gem = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.buy_gem = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.pay_amt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buy_amt = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogTradeEventResponse> logTradeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGTRADE_EVENT));
        return logTradeEventFlowable(filter);
    }

    public List<LogUnsortedOfferEventResponse> getLogUnsortedOfferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGUNSORTEDOFFER_EVENT, transactionReceipt);
        ArrayList<LogUnsortedOfferEventResponse> responses = new ArrayList<LogUnsortedOfferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogUnsortedOfferEventResponse typedResponse = new LogUnsortedOfferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogUnsortedOfferEventResponse> logUnsortedOfferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LogUnsortedOfferEventResponse>() {
            @Override
            public LogUnsortedOfferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGUNSORTEDOFFER_EVENT, log);
                LogUnsortedOfferEventResponse typedResponse = new LogUnsortedOfferEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogUnsortedOfferEventResponse> logUnsortedOfferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGUNSORTEDOFFER_EVENT));
        return logUnsortedOfferEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> _best(String param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__BEST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _dust(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__DUST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> _near(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__NEAR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> _rank(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__RANK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> _span(String param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__SPAN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> authority() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AUTHORITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> bump(byte[] id_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUMP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger id, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buyAllAmount(String buy_gem, BigInteger buy_amt, String pay_gem, BigInteger max_fill_amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYALLAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(buy_amt), 
                new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(max_fill_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> buyEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BUYENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cancel(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CANCEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> close_time() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLOSE_TIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> del_rank(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEL_RANK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> dustId() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DUSTID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getBestOffer(String sell_gem, String buy_gem) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBESTOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sell_gem), 
                new org.web3j.abi.datatypes.Address(160, buy_gem)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getBetterOffer(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBETTEROFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getBuyAmount(String buy_gem, String pay_gem, BigInteger pay_amt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBUYAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(pay_amt)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getFirstUnsortedOffer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFIRSTUNSORTEDOFFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getMinSell(String pay_gem) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETMINSELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pay_gem)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getNextUnsortedOffer(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNEXTUNSORTEDOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, String, BigInteger, String>> getOffer(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, String, BigInteger, String>>(function,
                new Callable<Tuple4<BigInteger, String, BigInteger, String>>() {
                    @Override
                    public Tuple4<BigInteger, String, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, String, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getOfferCount(String sell_gem, String buy_gem) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOFFERCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sell_gem), 
                new org.web3j.abi.datatypes.Address(160, buy_gem)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getOwner(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getPayAmount(String pay_gem, String buy_gem, BigInteger buy_amt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPAYAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(buy_amt)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTime() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getWorseOffer(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETWORSEOFFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> insert(BigInteger id, BigInteger pos) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INSERT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isActive(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISACTIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isClosed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISCLOSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOfferSorted(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOFFERSORTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> kill(byte[] id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_KILL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> last_offer_id() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LAST_OFFER_ID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> make(String pay_gem, String buy_gem, BigInteger pay_amt, BigInteger buy_amt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.generated.Uint128(pay_amt), 
                new org.web3j.abi.datatypes.generated.Uint128(buy_amt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> matchingEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MATCHINGENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> offer(BigInteger pay_amt, String pay_gem, BigInteger buy_amt, String buy_gem, BigInteger pos) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_offer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pay_amt), 
                new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(buy_amt), 
                new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(pos)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> offer(BigInteger pay_amt, String pay_gem, BigInteger buy_amt, String buy_gem, BigInteger pos, Boolean rounding) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_offer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pay_amt), 
                new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(buy_amt), 
                new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(pos), 
                new org.web3j.abi.datatypes.Bool(rounding)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> offer(BigInteger pay_amt, String pay_gem, BigInteger buy_amt, String buy_gem) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_offer, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(pay_amt), 
                new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(buy_amt), 
                new org.web3j.abi.datatypes.Address(160, buy_gem)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple6<BigInteger, String, BigInteger, String, String, BigInteger>> offers(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OFFERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple6<BigInteger, String, BigInteger, String, String, BigInteger>>(function,
                new Callable<Tuple6<BigInteger, String, BigInteger, String, String, BigInteger>>() {
                    @Override
                    public Tuple6<BigInteger, String, BigInteger, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<BigInteger, String, BigInteger, String, String, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> sellAllAmount(String pay_gem, BigInteger pay_amt, String buy_gem, BigInteger min_fill_amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLALLAMOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(pay_amt), 
                new org.web3j.abi.datatypes.Address(160, buy_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(min_fill_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthority(String authority_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAUTHORITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, authority_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBuyEnabled(Boolean buyEnabled_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBUYENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(buyEnabled_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMatchingEnabled(Boolean matchingEnabled_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMATCHINGENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(matchingEnabled_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMinSell(String pay_gem, BigInteger dust) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMINSELL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pay_gem), 
                new org.web3j.abi.datatypes.generated.Uint256(dust)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setOwner(String owner_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> stop() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_STOP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> stopped() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STOPPED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> take(byte[] id, BigInteger maxTakeAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TAKE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(id), 
                new org.web3j.abi.datatypes.generated.Uint128(maxTakeAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static OasisDexContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new OasisDexContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static OasisDexContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new OasisDexContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static OasisDexContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new OasisDexContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static OasisDexContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new OasisDexContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<OasisDexContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger close_time) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(close_time)));
        return deployRemoteCall(OasisDexContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<OasisDexContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger close_time) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(close_time)));
        return deployRemoteCall(OasisDexContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<OasisDexContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger close_time) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(close_time)));
        return deployRemoteCall(OasisDexContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<OasisDexContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger close_time) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint64(close_time)));
        return deployRemoteCall(OasisDexContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class LogBumpEventResponse extends BaseEventResponse {
        public byte[] id;

        public byte[] pair;

        public String maker;

        public String pay_gem;

        public String buy_gem;

        public BigInteger pay_amt;

        public BigInteger buy_amt;

        public BigInteger timestamp;
    }

    public static class LogBuyEnabledEventResponse extends BaseEventResponse {
        public Boolean isEnabled;
    }

    public static class LogDeleteEventResponse extends BaseEventResponse {
        public String keeper;

        public BigInteger id;
    }

    public static class LogInsertEventResponse extends BaseEventResponse {
        public String keeper;

        public BigInteger id;
    }

    public static class LogItemUpdateEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class LogKillEventResponse extends BaseEventResponse {
        public byte[] id;

        public byte[] pair;

        public String maker;

        public String pay_gem;

        public String buy_gem;

        public BigInteger pay_amt;

        public BigInteger buy_amt;

        public BigInteger timestamp;
    }

    public static class LogMakeEventResponse extends BaseEventResponse {
        public byte[] id;

        public byte[] pair;

        public String maker;

        public String pay_gem;

        public String buy_gem;

        public BigInteger pay_amt;

        public BigInteger buy_amt;

        public BigInteger timestamp;
    }

    public static class LogMatchingEnabledEventResponse extends BaseEventResponse {
        public Boolean isEnabled;
    }

    public static class LogMinSellEventResponse extends BaseEventResponse {
        public String pay_gem;

        public BigInteger min_amount;
    }

    public static class LogNoteEventResponse extends BaseEventResponse {
        public byte[] sig;

        public String guy;

        public byte[] foo;

        public byte[] bar;

        public BigInteger wad;

        public byte[] fax;
    }

    public static class LogSetAuthorityEventResponse extends BaseEventResponse {
        public String authority;
    }

    public static class LogSetOwnerEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class LogSortedOfferEventResponse extends BaseEventResponse {
        public BigInteger id;
    }

    public static class LogTakeEventResponse extends BaseEventResponse {
        public byte[] pair;

        public String maker;

        public String taker;

        public byte[] id;

        public String pay_gem;

        public String buy_gem;

        public BigInteger take_amt;

        public BigInteger give_amt;

        public BigInteger timestamp;
    }

    public static class LogTradeEventResponse extends BaseEventResponse {
        public String pay_gem;

        public String buy_gem;

        public BigInteger pay_amt;

        public BigInteger buy_amt;
    }

    public static class LogUnsortedOfferEventResponse extends BaseEventResponse {
        public BigInteger id;
    }
}
