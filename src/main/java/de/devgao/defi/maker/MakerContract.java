package devgao.io.maker;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class MakerContract extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_JOIN = "join";

    public static final String FUNC_SIN = "sin";

    public static final String FUNC_SKR = "skr";

    public static final String FUNC_GOV = "gov";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_ERA = "era";

    public static final String FUNC_INK = "ink";

    public static final String FUNC_RHO = "rho";

    public static final String FUNC_AIR = "air";

    public static final String FUNC_RHI = "rhi";

    public static final String FUNC_FLOW = "flow";

    public static final String FUNC_CAP = "cap";

    public static final String FUNC_BITE = "bite";

    public static final String FUNC_DRAW = "draw";

    public static final String FUNC_BID = "bid";

    public static final String FUNC_CUPI = "cupi";

    public static final String FUNC_AXE = "axe";

    public static final String FUNC_TAG = "tag";

    public static final String FUNC_OFF = "off";

    public static final String FUNC_VOX = "vox";

    public static final String FUNC_GAP = "gap";

    public static final String FUNC_RAP = "rap";

    public static final String FUNC_WIPE = "wipe";

    public static final String FUNC_SETAUTHORITY = "setAuthority";

    public static final String FUNC_GEM = "gem";

    public static final String FUNC_TURN = "turn";

    public static final String FUNC_PER = "per";

    public static final String FUNC_EXIT = "exit";

    public static final String FUNC_SETPIP = "setPip";

    public static final String FUNC_PIE = "pie";

    public static final String FUNC_CAGE = "cage";

    public static final String FUNC_RUM = "rum";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_SAI = "sai";

    public static final String FUNC_MOLD = "mold";

    public static final String FUNC_TAX = "tax";

    public static final String FUNC_DRIP = "drip";

    public static final String FUNC_FREE = "free";

    public static final String FUNC_MAT = "mat";

    public static final String FUNC_PEP = "pep";

    public static final String FUNC_OUT = "out";

    public static final String FUNC_LOCK = "lock";

    public static final String FUNC_SHUT = "shut";

    public static final String FUNC_GIVE = "give";

    public static final String FUNC_AUTHORITY = "authority";

    public static final String FUNC_FIT = "fit";

    public static final String FUNC_CHI = "chi";

    public static final String FUNC_SETVOX = "setVox";

    public static final String FUNC_PIP = "pip";

    public static final String FUNC_SETPEP = "setPep";

    public static final String FUNC_FEE = "fee";

    public static final String FUNC_LAD = "lad";

    public static final String FUNC_DIN = "din";

    public static final String FUNC_ASK = "ask";

    public static final String FUNC_SAFE = "safe";

    public static final String FUNC_PIT = "pit";

    public static final String FUNC_TAB = "tab";

    public static final String FUNC_OPEN = "open";

    public static final String FUNC_TAP = "tap";

    public static final String FUNC_CUPS = "cups";

    public static final Event LOGNEWCUP_EVENT = new Event("LogNewCup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event LOGNOTE_EVENT = new Event("LogNote", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event LOGSETAUTHORITY_EVENT = new Event("LogSetAuthority", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event LOGSETOWNER_EVENT = new Event("LogSetOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected MakerContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MakerContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MakerContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MakerContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> join(BigInteger wad) {
        final Function function = new Function(
                FUNC_JOIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> sin() {
        final Function function = new Function(FUNC_SIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> skr() {
        final Function function = new Function(FUNC_SKR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> gov() {
        final Function function = new Function(FUNC_GOV, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setOwner(String owner_) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> era() {
        final Function function = new Function(FUNC_ERA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> ink(byte[] cup) {
        final Function function = new Function(FUNC_INK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> rho() {
        final Function function = new Function(FUNC_RHO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> air() {
        final Function function = new Function(FUNC_AIR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> rhi() {
        final Function function = new Function(
                FUNC_RHI, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> flow() {
        final Function function = new Function(
                FUNC_FLOW, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> cap() {
        final Function function = new Function(FUNC_CAP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> bite(byte[] cup) {
        final Function function = new Function(
                FUNC_BITE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> draw(byte[] cup, BigInteger wad) {
        final Function function = new Function(
                FUNC_DRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup), 
                new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> bid(BigInteger wad) {
        final Function function = new Function(FUNC_BID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> cupi() {
        final Function function = new Function(FUNC_CUPI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> axe() {
        final Function function = new Function(FUNC_AXE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tag() {
        final Function function = new Function(FUNC_TAG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> off() {
        final Function function = new Function(FUNC_OFF, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> vox() {
        final Function function = new Function(FUNC_VOX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> gap() {
        final Function function = new Function(FUNC_GAP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> rap(byte[] cup) {
        final Function function = new Function(
                FUNC_RAP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> wipe(byte[] cup, BigInteger wad) {
        final Function function = new Function(
                FUNC_WIPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup), 
                new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAuthority(String authority_) {
        final Function function = new Function(
                FUNC_SETAUTHORITY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, authority_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> gem() {
        final Function function = new Function(FUNC_GEM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> turn(String tap_) {
        final Function function = new Function(
                FUNC_TURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, tap_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> per() {
        final Function function = new Function(FUNC_PER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> exit(BigInteger wad) {
        final Function function = new Function(
                FUNC_EXIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPip(String pip_) {
        final Function function = new Function(
                FUNC_SETPIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pip_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> pie() {
        final Function function = new Function(FUNC_PIE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> cage(BigInteger fit_, BigInteger jam) {
        final Function function = new Function(
                FUNC_CAGE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(fit_), 
                new org.web3j.abi.datatypes.generated.Uint256(jam)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> rum() {
        final Function function = new Function(FUNC_RUM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> sai() {
        final Function function = new Function(FUNC_SAI, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mold(byte[] param, BigInteger val) {
        final Function function = new Function(
                FUNC_MOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param), 
                new org.web3j.abi.datatypes.generated.Uint256(val)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> tax() {
        final Function function = new Function(FUNC_TAX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> drip() {
        final Function function = new Function(
                FUNC_DRIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> free(byte[] cup, BigInteger wad) {
        final Function function = new Function(
                FUNC_FREE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup), 
                new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> mat() {
        final Function function = new Function(FUNC_MAT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> pep() {
        final Function function = new Function(FUNC_PEP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> out() {
        final Function function = new Function(FUNC_OUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lock(byte[] cup, BigInteger wad) {
        final Function function = new Function(
                FUNC_LOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup), 
                new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> shut(byte[] cup) {
        final Function function = new Function(
                FUNC_SHUT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> give(byte[] cup, String guy) {
        final Function function = new Function(
                FUNC_GIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup), 
                new org.web3j.abi.datatypes.Address(160, guy)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> authority() {
        final Function function = new Function(FUNC_AUTHORITY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> fit() {
        final Function function = new Function(FUNC_FIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> chi() {
        final Function function = new Function(
                FUNC_CHI, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setVox(String vox_) {
        final Function function = new Function(
                FUNC_SETVOX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, vox_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> pip() {
        final Function function = new Function(FUNC_PIP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setPep(String pep_) {
        final Function function = new Function(
                FUNC_SETPEP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, pep_)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> fee() {
        final Function function = new Function(FUNC_FEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> lad(byte[] cup) {
        final Function function = new Function(FUNC_LAD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> din() {
        final Function function = new Function(
                FUNC_DIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> ask(BigInteger wad) {
        final Function function = new Function(FUNC_ASK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(wad)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> safe(byte[] cup) {
        final Function function = new Function(
                FUNC_SAFE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> pit() {
        final Function function = new Function(FUNC_PIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> tab(byte[] cup) {
        final Function function = new Function(
                FUNC_TAB, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(cup)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> open() {
        final Function function = new Function(
                FUNC_OPEN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> tap() {
        final Function function = new Function(FUNC_TAP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>> cups(byte[] param0) {
        final Function function = new Function(FUNC_CUPS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public List<LogNewCupEventResponse> getLogNewCupEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGNEWCUP_EVENT, transactionReceipt);
        ArrayList<LogNewCupEventResponse> responses = new ArrayList<LogNewCupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogNewCupEventResponse typedResponse = new LogNewCupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.lad = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.cup = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogNewCupEventResponse> logNewCupEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, LogNewCupEventResponse>() {
            @Override
            public LogNewCupEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGNEWCUP_EVENT, log);
                LogNewCupEventResponse typedResponse = new LogNewCupEventResponse();
                typedResponse.log = log;
                typedResponse.lad = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.cup = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogNewCupEventResponse> logNewCupEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGNEWCUP_EVENT));
        return logNewCupEventFlowable(filter);
    }

    public List<LogNoteEventResponse> getLogNoteEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGNOTE_EVENT, transactionReceipt);
        ArrayList<LogNoteEventResponse> responses = new ArrayList<LogNoteEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogNoteEventResponse typedResponse = new LogNoteEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sig = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.guy = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.foo = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.bar = (byte[]) eventValues.getIndexedValues().get(3).getValue();
            typedResponse.wad = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.fax = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogNoteEventResponse> logNoteEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, LogNoteEventResponse>() {
            @Override
            public LogNoteEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGNOTE_EVENT, log);
                LogNoteEventResponse typedResponse = new LogNoteEventResponse();
                typedResponse.log = log;
                typedResponse.sig = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.guy = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.foo = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.bar = (byte[]) eventValues.getIndexedValues().get(3).getValue();
                typedResponse.wad = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.fax = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogNoteEventResponse> logNoteEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGNOTE_EVENT));
        return logNoteEventFlowable(filter);
    }

    public List<LogSetAuthorityEventResponse> getLogSetAuthorityEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETAUTHORITY_EVENT, transactionReceipt);
        ArrayList<LogSetAuthorityEventResponse> responses = new ArrayList<LogSetAuthorityEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetAuthorityEventResponse typedResponse = new LogSetAuthorityEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authority = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogSetAuthorityEventResponse> logSetAuthorityEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, LogSetAuthorityEventResponse>() {
            @Override
            public LogSetAuthorityEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGSETAUTHORITY_EVENT, log);
                LogSetAuthorityEventResponse typedResponse = new LogSetAuthorityEventResponse();
                typedResponse.log = log;
                typedResponse.authority = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogSetAuthorityEventResponse> logSetAuthorityEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGSETAUTHORITY_EVENT));
        return logSetAuthorityEventFlowable(filter);
    }

    public List<LogSetOwnerEventResponse> getLogSetOwnerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETOWNER_EVENT, transactionReceipt);
        ArrayList<LogSetOwnerEventResponse> responses = new ArrayList<LogSetOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LogSetOwnerEventResponse> logSetOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, LogSetOwnerEventResponse>() {
            @Override
            public LogSetOwnerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LOGSETOWNER_EVENT, log);
                LogSetOwnerEventResponse typedResponse = new LogSetOwnerEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LogSetOwnerEventResponse> logSetOwnerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LOGSETOWNER_EVENT));
        return logSetOwnerEventFlowable(filter);
    }

    @Deprecated
    public static MakerContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MakerContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MakerContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MakerContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MakerContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MakerContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MakerContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MakerContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MakerContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String sai_, String sin_, String skr_, String gem_, String gov_, String pip_, String pep_, String vox_, String pit_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sai_), 
                new org.web3j.abi.datatypes.Address(160, sin_), 
                new org.web3j.abi.datatypes.Address(160, skr_), 
                new org.web3j.abi.datatypes.Address(160, gem_), 
                new org.web3j.abi.datatypes.Address(160, gov_), 
                new org.web3j.abi.datatypes.Address(160, pip_), 
                new org.web3j.abi.datatypes.Address(160, pep_), 
                new org.web3j.abi.datatypes.Address(160, vox_), 
                new org.web3j.abi.datatypes.Address(160, pit_)));
        return deployRemoteCall(MakerContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<MakerContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String sai_, String sin_, String skr_, String gem_, String gov_, String pip_, String pep_, String vox_, String pit_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sai_), 
                new org.web3j.abi.datatypes.Address(160, sin_), 
                new org.web3j.abi.datatypes.Address(160, skr_), 
                new org.web3j.abi.datatypes.Address(160, gem_), 
                new org.web3j.abi.datatypes.Address(160, gov_), 
                new org.web3j.abi.datatypes.Address(160, pip_), 
                new org.web3j.abi.datatypes.Address(160, pep_), 
                new org.web3j.abi.datatypes.Address(160, vox_), 
                new org.web3j.abi.datatypes.Address(160, pit_)));
        return deployRemoteCall(MakerContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MakerContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String sai_, String sin_, String skr_, String gem_, String gov_, String pip_, String pep_, String vox_, String pit_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sai_), 
                new org.web3j.abi.datatypes.Address(160, sin_), 
                new org.web3j.abi.datatypes.Address(160, skr_), 
                new org.web3j.abi.datatypes.Address(160, gem_), 
                new org.web3j.abi.datatypes.Address(160, gov_), 
                new org.web3j.abi.datatypes.Address(160, pip_), 
                new org.web3j.abi.datatypes.Address(160, pep_), 
                new org.web3j.abi.datatypes.Address(160, vox_), 
                new org.web3j.abi.datatypes.Address(160, pit_)));
        return deployRemoteCall(MakerContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<MakerContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String sai_, String sin_, String skr_, String gem_, String gov_, String pip_, String pep_, String vox_, String pit_) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, sai_), 
                new org.web3j.abi.datatypes.Address(160, sin_), 
                new org.web3j.abi.datatypes.Address(160, skr_), 
                new org.web3j.abi.datatypes.Address(160, gem_), 
                new org.web3j.abi.datatypes.Address(160, gov_), 
                new org.web3j.abi.datatypes.Address(160, pip_), 
                new org.web3j.abi.datatypes.Address(160, pep_), 
                new org.web3j.abi.datatypes.Address(160, vox_), 
                new org.web3j.abi.datatypes.Address(160, pit_)));
        return deployRemoteCall(MakerContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class LogNewCupEventResponse extends BaseEventResponse {
        public String lad;

        public byte[] cup;
    }

    public static class LogNoteEventResponse extends BaseEventResponse {
        public byte[] sig;

        public String guy;

        public byte[] foo;

        public byte[] bar;

        public BigInteger wad;

        public byte[] fax;
    }

    public static class LogSetAuthorityEventResponse extends BaseEventResponse {
        public String authority;
    }

    public static class LogSetOwnerEventResponse extends BaseEventResponse {
        public String owner;
    }
}
