package devgao.io.compounddai;

import devgao.io.contractutil.AccountMethod;
import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class CompoundDaiContract extends Contract implements AccountMethod {
    private static final String BINARY = "";

    public static final String FUNC__ACCEPTADMIN = "_acceptAdmin";

    public static final String FUNC__ADDRESERVES = "_addReserves";

    public static final String FUNC__REDUCERESERVES = "_reduceReserves";

    public static final String FUNC__SETCOMPTROLLER = "_setComptroller";

    public static final String FUNC__SETIMPLEMENTATION = "_setImplementation";

    public static final String FUNC__SETINTERESTRATEMODEL = "_setInterestRateModel";

    public static final String FUNC__SETPENDINGADMIN = "_setPendingAdmin";

    public static final String FUNC__SETRESERVEFACTOR = "_setReserveFactor";

    public static final String FUNC_ACCRUALBLOCKNUMBER = "accrualBlockNumber";

    public static final String FUNC_ACCRUEINTEREST = "accrueInterest";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_ALLOWANCE = "allowance";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFUNDERLYING = "balanceOfUnderlying";

    public static final String FUNC_BORROW = "borrow";

    public static final String FUNC_BORROWBALANCECURRENT = "borrowBalanceCurrent";

    public static final String FUNC_BORROWBALANCESTORED = "borrowBalanceStored";

    public static final String FUNC_BORROWINDEX = "borrowIndex";

    public static final String FUNC_BORROWRATEPERBLOCK = "borrowRatePerBlock";

    public static final String FUNC_COMPTROLLER = "comptroller";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DELEGATETOIMPLEMENTATION = "delegateToImplementation";

    public static final String FUNC_DELEGATETOVIEWIMPLEMENTATION = "delegateToViewImplementation";

    public static final String FUNC_EXCHANGERATECURRENT = "exchangeRateCurrent";

    public static final String FUNC_EXCHANGERATESTORED = "exchangeRateStored";

    public static final String FUNC_GETACCOUNTSNAPSHOT = "getAccountSnapshot";

    public static final String FUNC_GETCASH = "getCash";

    public static final String FUNC_IMPLEMENTATION = "implementation";

    public static final String FUNC_INTERESTRATEMODEL = "interestRateModel";

    public static final String FUNC_ISCTOKEN = "isCToken";

    public static final String FUNC_LIQUIDATEBORROW = "liquidateBorrow";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_PENDINGADMIN = "pendingAdmin";

    public static final String FUNC_REDEEM = "redeem";

    public static final String FUNC_REDEEMUNDERLYING = "redeemUnderlying";

    public static final String FUNC_REPAYBORROW = "repayBorrow";

    public static final String FUNC_REPAYBORROWBEHALF = "repayBorrowBehalf";

    public static final String FUNC_RESERVEFACTORMANTISSA = "reserveFactorMantissa";

    public static final String FUNC_SEIZE = "seize";

    public static final String FUNC_SUPPLYRATEPERBLOCK = "supplyRatePerBlock";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOTALBORROWS = "totalBorrows";

    public static final String FUNC_TOTALBORROWSCURRENT = "totalBorrowsCurrent";

    public static final String FUNC_TOTALRESERVES = "totalReserves";

    public static final String FUNC_TOTALSUPPLY = "totalSupply";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_UNDERLYING = "underlying";

    public static final Event ACCRUEINTEREST_EVENT = new Event("AccrueInterest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BORROW_EVENT = new Event("Borrow", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event FAILURE_EVENT = new Event("Failure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LIQUIDATEBORROW_EVENT = new Event("LiquidateBorrow", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MINT_EVENT = new Event("Mint", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWADMIN_EVENT = new Event("NewAdmin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWCOMPTROLLER_EVENT = new Event("NewComptroller", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWIMPLEMENTATION_EVENT = new Event("NewImplementation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWMARKETINTERESTRATEMODEL_EVENT = new Event("NewMarketInterestRateModel", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWPENDINGADMIN_EVENT = new Event("NewPendingAdmin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event NEWRESERVEFACTOR_EVENT = new Event("NewReserveFactor", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REDEEM_EVENT = new Event("Redeem", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REPAYBORROW_EVENT = new Event("RepayBorrow", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RESERVESADDED_EVENT = new Event("ReservesAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event RESERVESREDUCED_EVENT = new Event("ReservesReduced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected CompoundDaiContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CompoundDaiContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected CompoundDaiContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected CompoundDaiContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AccrueInterestEventResponse> getAccrueInterestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ACCRUEINTEREST_EVENT, transactionReceipt);
        ArrayList<AccrueInterestEventResponse> responses = new ArrayList<AccrueInterestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AccrueInterestEventResponse typedResponse = new AccrueInterestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.cashPrior = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.interestAccumulated = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.borrowIndex = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.totalBorrows = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AccrueInterestEventResponse> accrueInterestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AccrueInterestEventResponse>() {
            @Override
            public AccrueInterestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ACCRUEINTEREST_EVENT, log);
                AccrueInterestEventResponse typedResponse = new AccrueInterestEventResponse();
                typedResponse.log = log;
                typedResponse.cashPrior = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.interestAccumulated = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.borrowIndex = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.totalBorrows = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AccrueInterestEventResponse> accrueInterestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ACCRUEINTEREST_EVENT));
        return accrueInterestEventFlowable(filter);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.spender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<BorrowEventResponse> getBorrowEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BORROW_EVENT, transactionReceipt);
        ArrayList<BorrowEventResponse> responses = new ArrayList<BorrowEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BorrowEventResponse typedResponse = new BorrowEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.borrowAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.accountBorrows = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.totalBorrows = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BorrowEventResponse> borrowEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BorrowEventResponse>() {
            @Override
            public BorrowEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BORROW_EVENT, log);
                BorrowEventResponse typedResponse = new BorrowEventResponse();
                typedResponse.log = log;
                typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.borrowAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.accountBorrows = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.totalBorrows = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BorrowEventResponse> borrowEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BORROW_EVENT));
        return borrowEventFlowable(filter);
    }

    public List<FailureEventResponse> getFailureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FAILURE_EVENT, transactionReceipt);
        ArrayList<FailureEventResponse> responses = new ArrayList<FailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FailureEventResponse typedResponse = new FailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.error = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.info = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.detail = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<FailureEventResponse> failureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, FailureEventResponse>() {
            @Override
            public FailureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FAILURE_EVENT, log);
                FailureEventResponse typedResponse = new FailureEventResponse();
                typedResponse.log = log;
                typedResponse.error = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.info = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.detail = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<FailureEventResponse> failureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FAILURE_EVENT));
        return failureEventFlowable(filter);
    }

    public List<LiquidateBorrowEventResponse> getLiquidateBorrowEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LIQUIDATEBORROW_EVENT, transactionReceipt);
        ArrayList<LiquidateBorrowEventResponse> responses = new ArrayList<LiquidateBorrowEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LiquidateBorrowEventResponse typedResponse = new LiquidateBorrowEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.liquidator = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.repayAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.cTokenCollateral = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.seizeTokens = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LiquidateBorrowEventResponse> liquidateBorrowEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LiquidateBorrowEventResponse>() {
            @Override
            public LiquidateBorrowEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LIQUIDATEBORROW_EVENT, log);
                LiquidateBorrowEventResponse typedResponse = new LiquidateBorrowEventResponse();
                typedResponse.log = log;
                typedResponse.liquidator = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.repayAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.cTokenCollateral = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.seizeTokens = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LiquidateBorrowEventResponse> liquidateBorrowEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIQUIDATEBORROW_EVENT));
        return liquidateBorrowEventFlowable(filter);
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MINT_EVENT, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.mintAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.mintTokens = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MintEventResponse> mintEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MintEventResponse>() {
            @Override
            public MintEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MINT_EVENT, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.log = log;
                typedResponse.minter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.mintAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.mintTokens = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MintEventResponse> mintEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINT_EVENT));
        return mintEventFlowable(filter);
    }

    public List<NewAdminEventResponse> getNewAdminEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWADMIN_EVENT, transactionReceipt);
        ArrayList<NewAdminEventResponse> responses = new ArrayList<NewAdminEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewAdminEventResponse typedResponse = new NewAdminEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewAdminEventResponse> newAdminEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewAdminEventResponse>() {
            @Override
            public NewAdminEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWADMIN_EVENT, log);
                NewAdminEventResponse typedResponse = new NewAdminEventResponse();
                typedResponse.log = log;
                typedResponse.oldAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewAdminEventResponse> newAdminEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWADMIN_EVENT));
        return newAdminEventFlowable(filter);
    }

    public List<NewComptrollerEventResponse> getNewComptrollerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWCOMPTROLLER_EVENT, transactionReceipt);
        ArrayList<NewComptrollerEventResponse> responses = new ArrayList<NewComptrollerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewComptrollerEventResponse typedResponse = new NewComptrollerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldComptroller = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newComptroller = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewComptrollerEventResponse> newComptrollerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewComptrollerEventResponse>() {
            @Override
            public NewComptrollerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWCOMPTROLLER_EVENT, log);
                NewComptrollerEventResponse typedResponse = new NewComptrollerEventResponse();
                typedResponse.log = log;
                typedResponse.oldComptroller = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newComptroller = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewComptrollerEventResponse> newComptrollerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWCOMPTROLLER_EVENT));
        return newComptrollerEventFlowable(filter);
    }

    public List<NewImplementationEventResponse> getNewImplementationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWIMPLEMENTATION_EVENT, transactionReceipt);
        ArrayList<NewImplementationEventResponse> responses = new ArrayList<NewImplementationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewImplementationEventResponse typedResponse = new NewImplementationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldImplementation = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newImplementation = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewImplementationEventResponse> newImplementationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewImplementationEventResponse>() {
            @Override
            public NewImplementationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWIMPLEMENTATION_EVENT, log);
                NewImplementationEventResponse typedResponse = new NewImplementationEventResponse();
                typedResponse.log = log;
                typedResponse.oldImplementation = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newImplementation = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewImplementationEventResponse> newImplementationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWIMPLEMENTATION_EVENT));
        return newImplementationEventFlowable(filter);
    }

    public List<NewMarketInterestRateModelEventResponse> getNewMarketInterestRateModelEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWMARKETINTERESTRATEMODEL_EVENT, transactionReceipt);
        ArrayList<NewMarketInterestRateModelEventResponse> responses = new ArrayList<NewMarketInterestRateModelEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewMarketInterestRateModelEventResponse typedResponse = new NewMarketInterestRateModelEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldInterestRateModel = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newInterestRateModel = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewMarketInterestRateModelEventResponse> newMarketInterestRateModelEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewMarketInterestRateModelEventResponse>() {
            @Override
            public NewMarketInterestRateModelEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWMARKETINTERESTRATEMODEL_EVENT, log);
                NewMarketInterestRateModelEventResponse typedResponse = new NewMarketInterestRateModelEventResponse();
                typedResponse.log = log;
                typedResponse.oldInterestRateModel = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newInterestRateModel = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewMarketInterestRateModelEventResponse> newMarketInterestRateModelEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWMARKETINTERESTRATEMODEL_EVENT));
        return newMarketInterestRateModelEventFlowable(filter);
    }

    public List<NewPendingAdminEventResponse> getNewPendingAdminEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWPENDINGADMIN_EVENT, transactionReceipt);
        ArrayList<NewPendingAdminEventResponse> responses = new ArrayList<NewPendingAdminEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewPendingAdminEventResponse typedResponse = new NewPendingAdminEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldPendingAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newPendingAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewPendingAdminEventResponse> newPendingAdminEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewPendingAdminEventResponse>() {
            @Override
            public NewPendingAdminEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWPENDINGADMIN_EVENT, log);
                NewPendingAdminEventResponse typedResponse = new NewPendingAdminEventResponse();
                typedResponse.log = log;
                typedResponse.oldPendingAdmin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newPendingAdmin = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewPendingAdminEventResponse> newPendingAdminEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWPENDINGADMIN_EVENT));
        return newPendingAdminEventFlowable(filter);
    }

    public List<NewReserveFactorEventResponse> getNewReserveFactorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWRESERVEFACTOR_EVENT, transactionReceipt);
        ArrayList<NewReserveFactorEventResponse> responses = new ArrayList<NewReserveFactorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewReserveFactorEventResponse typedResponse = new NewReserveFactorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldReserveFactorMantissa = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.newReserveFactorMantissa = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewReserveFactorEventResponse> newReserveFactorEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewReserveFactorEventResponse>() {
            @Override
            public NewReserveFactorEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWRESERVEFACTOR_EVENT, log);
                NewReserveFactorEventResponse typedResponse = new NewReserveFactorEventResponse();
                typedResponse.log = log;
                typedResponse.oldReserveFactorMantissa = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.newReserveFactorMantissa = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewReserveFactorEventResponse> newReserveFactorEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWRESERVEFACTOR_EVENT));
        return newReserveFactorEventFlowable(filter);
    }

    public List<RedeemEventResponse> getRedeemEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REDEEM_EVENT, transactionReceipt);
        ArrayList<RedeemEventResponse> responses = new ArrayList<RedeemEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RedeemEventResponse typedResponse = new RedeemEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.redeemer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.redeemAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.redeemTokens = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RedeemEventResponse> redeemEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RedeemEventResponse>() {
            @Override
            public RedeemEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REDEEM_EVENT, log);
                RedeemEventResponse typedResponse = new RedeemEventResponse();
                typedResponse.log = log;
                typedResponse.redeemer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.redeemAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.redeemTokens = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RedeemEventResponse> redeemEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REDEEM_EVENT));
        return redeemEventFlowable(filter);
    }

    public List<RepayBorrowEventResponse> getRepayBorrowEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REPAYBORROW_EVENT, transactionReceipt);
        ArrayList<RepayBorrowEventResponse> responses = new ArrayList<RepayBorrowEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RepayBorrowEventResponse typedResponse = new RepayBorrowEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.payer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.repayAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.accountBorrows = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.totalBorrows = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RepayBorrowEventResponse> repayBorrowEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RepayBorrowEventResponse>() {
            @Override
            public RepayBorrowEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REPAYBORROW_EVENT, log);
                RepayBorrowEventResponse typedResponse = new RepayBorrowEventResponse();
                typedResponse.log = log;
                typedResponse.payer = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.borrower = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.repayAmount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.accountBorrows = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.totalBorrows = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RepayBorrowEventResponse> repayBorrowEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REPAYBORROW_EVENT));
        return repayBorrowEventFlowable(filter);
    }

    public List<ReservesAddedEventResponse> getReservesAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESERVESADDED_EVENT, transactionReceipt);
        ArrayList<ReservesAddedEventResponse> responses = new ArrayList<ReservesAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReservesAddedEventResponse typedResponse = new ReservesAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.benefactor = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.addAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newTotalReserves = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReservesAddedEventResponse> reservesAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReservesAddedEventResponse>() {
            @Override
            public ReservesAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESERVESADDED_EVENT, log);
                ReservesAddedEventResponse typedResponse = new ReservesAddedEventResponse();
                typedResponse.log = log;
                typedResponse.benefactor = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.addAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newTotalReserves = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReservesAddedEventResponse> reservesAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESERVESADDED_EVENT));
        return reservesAddedEventFlowable(filter);
    }

    public List<ReservesReducedEventResponse> getReservesReducedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESERVESREDUCED_EVENT, transactionReceipt);
        ArrayList<ReservesReducedEventResponse> responses = new ArrayList<ReservesReducedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReservesReducedEventResponse typedResponse = new ReservesReducedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.admin = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reduceAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.newTotalReserves = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReservesReducedEventResponse> reservesReducedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReservesReducedEventResponse>() {
            @Override
            public ReservesReducedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESERVESREDUCED_EVENT, log);
                ReservesReducedEventResponse typedResponse = new ReservesReducedEventResponse();
                typedResponse.log = log;
                typedResponse.admin = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.reduceAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.newTotalReserves = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReservesReducedEventResponse> reservesReducedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESERVESREDUCED_EVENT));
        return reservesReducedEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> _acceptAdmin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__ACCEPTADMIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _addReserves(BigInteger addAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__ADDRESERVES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(addAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _reduceReserves(BigInteger reduceAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__REDUCERESERVES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(reduceAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _setComptroller(String newComptroller) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__SETCOMPTROLLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newComptroller)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _setImplementation(String implementation_, Boolean allowResign, byte[] becomeImplementationData) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__SETIMPLEMENTATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, implementation_), 
                new org.web3j.abi.datatypes.Bool(allowResign), 
                new org.web3j.abi.datatypes.DynamicBytes(becomeImplementationData)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _setInterestRateModel(String newInterestRateModel) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__SETINTERESTRATEMODEL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newInterestRateModel)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _setPendingAdmin(String newPendingAdmin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__SETPENDINGADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newPendingAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> _setReserveFactor(BigInteger newReserveFactorMantissa) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__SETRESERVEFACTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(newReserveFactorMantissa)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> accrualBlockNumber() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ACCRUALBLOCKNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> accrueInterest() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCRUEINTEREST, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> admin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> allowance(String owner, String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLOWANCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, spender)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String spender, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, spender), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> balanceOfUnderlying(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BALANCEOFUNDERLYING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrow(BigInteger borrowAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BORROW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(borrowAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> borrowBalanceCurrent(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BORROWBALANCECURRENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> borrowBalanceStored(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BORROWBALANCESTORED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> borrowIndex() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BORROWINDEX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> borrowRatePerBlock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BORROWRATEPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> comptroller() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPTROLLER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> delegateToImplementation(byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DELEGATETOIMPLEMENTATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> delegateToViewImplementation(byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DELEGATETOVIEWIMPLEMENTATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> exchangeRateCurrent() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCHANGERATECURRENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> exchangeRateStored() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXCHANGERATESTORED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getAccountSnapshot(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETACCOUNTSNAPSHOT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getCash() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> implementation() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_IMPLEMENTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> interestRateModel() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INTERESTRATEMODEL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isCToken() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISCTOKEN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> liquidateBorrow(String borrower, BigInteger repayAmount, String cTokenCollateral) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LIQUIDATEBORROW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, borrower), 
                new org.web3j.abi.datatypes.generated.Uint256(repayAmount), 
                new org.web3j.abi.datatypes.Address(160, cTokenCollateral)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(BigInteger mintAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(mintAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> pendingAdmin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PENDINGADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> redeem(BigInteger redeemTokens) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(redeemTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> redeemUnderlying(BigInteger redeemAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REDEEMUNDERLYING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(redeemAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> repayBorrow(BigInteger repayAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REPAYBORROW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(repayAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> repayBorrowBehalf(String borrower, BigInteger repayAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REPAYBORROWBEHALF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, borrower), 
                new org.web3j.abi.datatypes.generated.Uint256(repayAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> reserveFactorMantissa() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RESERVEFACTORMANTISSA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> seize(String liquidator, String borrower, BigInteger seizeTokens) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SEIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, liquidator), 
                new org.web3j.abi.datatypes.Address(160, borrower), 
                new org.web3j.abi.datatypes.generated.Uint256(seizeTokens)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> supplyRatePerBlock() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPLYRATEPERBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> totalBorrows() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALBORROWS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> totalBorrowsCurrent() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TOTALBORROWSCURRENT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalReserves() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALRESERVES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> totalSupply() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String dst, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, dst), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String src, String dst, BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, src), 
                new org.web3j.abi.datatypes.Address(160, dst), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> underlying() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UNDERLYING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static CompoundDaiContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CompoundDaiContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static CompoundDaiContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CompoundDaiContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static CompoundDaiContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new CompoundDaiContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static CompoundDaiContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new CompoundDaiContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<CompoundDaiContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String underlying_, String comptroller_, String interestRateModel_, BigInteger initialExchangeRateMantissa_, String name_, String symbol_, BigInteger decimals_, String admin_, String implementation_, byte[] becomeImplementationData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, underlying_), 
                new org.web3j.abi.datatypes.Address(160, comptroller_), 
                new org.web3j.abi.datatypes.Address(160, interestRateModel_), 
                new org.web3j.abi.datatypes.generated.Uint256(initialExchangeRateMantissa_), 
                new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_), 
                new org.web3j.abi.datatypes.generated.Uint8(decimals_), 
                new org.web3j.abi.datatypes.Address(160, admin_), 
                new org.web3j.abi.datatypes.Address(160, implementation_), 
                new org.web3j.abi.datatypes.DynamicBytes(becomeImplementationData)));
        return deployRemoteCall(CompoundDaiContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<CompoundDaiContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String underlying_, String comptroller_, String interestRateModel_, BigInteger initialExchangeRateMantissa_, String name_, String symbol_, BigInteger decimals_, String admin_, String implementation_, byte[] becomeImplementationData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, underlying_), 
                new org.web3j.abi.datatypes.Address(160, comptroller_), 
                new org.web3j.abi.datatypes.Address(160, interestRateModel_), 
                new org.web3j.abi.datatypes.generated.Uint256(initialExchangeRateMantissa_), 
                new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_), 
                new org.web3j.abi.datatypes.generated.Uint8(decimals_), 
                new org.web3j.abi.datatypes.Address(160, admin_), 
                new org.web3j.abi.datatypes.Address(160, implementation_), 
                new org.web3j.abi.datatypes.DynamicBytes(becomeImplementationData)));
        return deployRemoteCall(CompoundDaiContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CompoundDaiContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String underlying_, String comptroller_, String interestRateModel_, BigInteger initialExchangeRateMantissa_, String name_, String symbol_, BigInteger decimals_, String admin_, String implementation_, byte[] becomeImplementationData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, underlying_), 
                new org.web3j.abi.datatypes.Address(160, comptroller_), 
                new org.web3j.abi.datatypes.Address(160, interestRateModel_), 
                new org.web3j.abi.datatypes.generated.Uint256(initialExchangeRateMantissa_), 
                new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_), 
                new org.web3j.abi.datatypes.generated.Uint8(decimals_), 
                new org.web3j.abi.datatypes.Address(160, admin_), 
                new org.web3j.abi.datatypes.Address(160, implementation_), 
                new org.web3j.abi.datatypes.DynamicBytes(becomeImplementationData)));
        return deployRemoteCall(CompoundDaiContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<CompoundDaiContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String underlying_, String comptroller_, String interestRateModel_, BigInteger initialExchangeRateMantissa_, String name_, String symbol_, BigInteger decimals_, String admin_, String implementation_, byte[] becomeImplementationData) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, underlying_), 
                new org.web3j.abi.datatypes.Address(160, comptroller_), 
                new org.web3j.abi.datatypes.Address(160, interestRateModel_), 
                new org.web3j.abi.datatypes.generated.Uint256(initialExchangeRateMantissa_), 
                new org.web3j.abi.datatypes.Utf8String(name_), 
                new org.web3j.abi.datatypes.Utf8String(symbol_), 
                new org.web3j.abi.datatypes.generated.Uint8(decimals_), 
                new org.web3j.abi.datatypes.Address(160, admin_), 
                new org.web3j.abi.datatypes.Address(160, implementation_), 
                new org.web3j.abi.datatypes.DynamicBytes(becomeImplementationData)));
        return deployRemoteCall(CompoundDaiContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class AccrueInterestEventResponse extends BaseEventResponse {
        public BigInteger cashPrior;

        public BigInteger interestAccumulated;

        public BigInteger borrowIndex;

        public BigInteger totalBorrows;
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String spender;

        public BigInteger amount;
    }

    public static class BorrowEventResponse extends BaseEventResponse {
        public String borrower;

        public BigInteger borrowAmount;

        public BigInteger accountBorrows;

        public BigInteger totalBorrows;
    }

    public static class FailureEventResponse extends BaseEventResponse {
        public BigInteger error;

        public BigInteger info;

        public BigInteger detail;
    }

    public static class LiquidateBorrowEventResponse extends BaseEventResponse {
        public String liquidator;

        public String borrower;

        public BigInteger repayAmount;

        public String cTokenCollateral;

        public BigInteger seizeTokens;
    }

    public static class MintEventResponse extends BaseEventResponse {
        public String minter;

        public BigInteger mintAmount;

        public BigInteger mintTokens;
    }

    public static class NewAdminEventResponse extends BaseEventResponse {
        public String oldAdmin;

        public String newAdmin;
    }

    public static class NewComptrollerEventResponse extends BaseEventResponse {
        public String oldComptroller;

        public String newComptroller;
    }

    public static class NewImplementationEventResponse extends BaseEventResponse {
        public String oldImplementation;

        public String newImplementation;
    }

    public static class NewMarketInterestRateModelEventResponse extends BaseEventResponse {
        public String oldInterestRateModel;

        public String newInterestRateModel;
    }

    public static class NewPendingAdminEventResponse extends BaseEventResponse {
        public String oldPendingAdmin;

        public String newPendingAdmin;
    }

    public static class NewReserveFactorEventResponse extends BaseEventResponse {
        public BigInteger oldReserveFactorMantissa;

        public BigInteger newReserveFactorMantissa;
    }

    public static class RedeemEventResponse extends BaseEventResponse {
        public String redeemer;

        public BigInteger redeemAmount;

        public BigInteger redeemTokens;
    }

    public static class RepayBorrowEventResponse extends BaseEventResponse {
        public String payer;

        public String borrower;

        public BigInteger repayAmount;

        public BigInteger accountBorrows;

        public BigInteger totalBorrows;
    }

    public static class ReservesAddedEventResponse extends BaseEventResponse {
        public String benefactor;

        public BigInteger addAmount;

        public BigInteger newTotalReserves;
    }

    public static class ReservesReducedEventResponse extends BaseEventResponse {
        public String admin;

        public BigInteger reduceAmount;

        public BigInteger newTotalReserves;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger amount;
    }
}
